// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/eventrunner/pkg/api/middleware (interfaces: CustomContext,JWTMiddlewareInterface,IDTokenVerifier,Token)
//
// Generated by this command:
//
//	mockgen -destination=mock_middleware.go -package=middleware github.com/carverauto/eventrunner/pkg/api/middleware CustomContext,JWTMiddlewareInterface,IDTokenVerifier,Token
//

// Package middleware is a generated GoMock package.
package middleware

import (
	context "context"
	reflect "reflect"

	context0 "github.com/carverauto/eventrunner/pkg/context"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockCustomContext is a mock of CustomContext interface.
type MockCustomContext struct {
	ctrl     *gomock.Controller
	recorder *MockCustomContextMockRecorder
}

// MockCustomContextMockRecorder is the mock recorder for MockCustomContext.
type MockCustomContextMockRecorder struct {
	mock *MockCustomContext
}

// NewMockCustomContext creates a new mock instance.
func NewMockCustomContext(ctrl *gomock.Controller) *MockCustomContext {
	mock := &MockCustomContext{ctrl: ctrl}
	mock.recorder = &MockCustomContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomContext) EXPECT() *MockCustomContextMockRecorder {
	return m.recorder
}

// FindAPIKey mocks base method.
func (m *MockCustomContext) FindAPIKey(arg0 string) (uuid.UUID, uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAPIKey", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(uuid.UUID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAPIKey indicates an expected call of FindAPIKey.
func (mr *MockCustomContextMockRecorder) FindAPIKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAPIKey", reflect.TypeOf((*MockCustomContext)(nil).FindAPIKey), arg0)
}

// GetAPIKey mocks base method.
func (m *MockCustomContext) GetAPIKey() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockCustomContextMockRecorder) GetAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockCustomContext)(nil).GetAPIKey))
}

// SetClaim mocks base method.
func (m *MockCustomContext) SetClaim(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClaim", arg0, arg1)
}

// SetClaim indicates an expected call of SetClaim.
func (mr *MockCustomContextMockRecorder) SetClaim(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaim", reflect.TypeOf((*MockCustomContext)(nil).SetClaim), arg0, arg1)
}

// MockJWTMiddlewareInterface is a mock of JWTMiddlewareInterface interface.
type MockJWTMiddlewareInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMiddlewareInterfaceMockRecorder
}

// MockJWTMiddlewareInterfaceMockRecorder is the mock recorder for MockJWTMiddlewareInterface.
type MockJWTMiddlewareInterfaceMockRecorder struct {
	mock *MockJWTMiddlewareInterface
}

// NewMockJWTMiddlewareInterface creates a new mock instance.
func NewMockJWTMiddlewareInterface(ctrl *gomock.Controller) *MockJWTMiddlewareInterface {
	mock := &MockJWTMiddlewareInterface{ctrl: ctrl}
	mock.recorder = &MockJWTMiddlewareInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTMiddlewareInterface) EXPECT() *MockJWTMiddlewareInterfaceMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockJWTMiddlewareInterface) Validate(arg0 func(context0.Context) (any, error)) gofr.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(gofr.Handler)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockJWTMiddlewareInterfaceMockRecorder) Validate(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockJWTMiddlewareInterface)(nil).Validate), arg0)
}

// MockIDTokenVerifier is a mock of IDTokenVerifier interface.
type MockIDTokenVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockIDTokenVerifierMockRecorder
}

// MockIDTokenVerifierMockRecorder is the mock recorder for MockIDTokenVerifier.
type MockIDTokenVerifierMockRecorder struct {
	mock *MockIDTokenVerifier
}

// NewMockIDTokenVerifier creates a new mock instance.
func NewMockIDTokenVerifier(ctrl *gomock.Controller) *MockIDTokenVerifier {
	mock := &MockIDTokenVerifier{ctrl: ctrl}
	mock.recorder = &MockIDTokenVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDTokenVerifier) EXPECT() *MockIDTokenVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockIDTokenVerifier) Verify(arg0 context.Context, arg1 string) (Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockIDTokenVerifierMockRecorder) Verify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIDTokenVerifier)(nil).Verify), arg0, arg1)
}

// MockToken is a mock of Token interface.
type MockToken struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMockRecorder
}

// MockTokenMockRecorder is the mock recorder for MockToken.
type MockTokenMockRecorder struct {
	mock *MockToken
}

// NewMockToken creates a new mock instance.
func NewMockToken(ctrl *gomock.Controller) *MockToken {
	mock := &MockToken{ctrl: ctrl}
	mock.recorder = &MockTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToken) EXPECT() *MockTokenMockRecorder {
	return m.recorder
}

// Claims mocks base method.
func (m *MockToken) Claims(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claims", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Claims indicates an expected call of Claims.
func (mr *MockTokenMockRecorder) Claims(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claims", reflect.TypeOf((*MockToken)(nil).Claims), arg0)
}
