// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/carverauto/eventrunner/pkg/context (interfaces: Interface)
//
// Generated by this command:
//
//	mockgen -destination=mock_context.go -package=context github.com/carverauto/eventrunner/pkg/context Interface
//

// Package context is a generated GoMock package.
package context

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockInterface) Bind(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockInterfaceMockRecorder) Bind(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockInterface)(nil).Bind), arg0)
}

// Context mocks base method.
func (m *MockInterface) Context() *gofr.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(*gofr.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockInterfaceMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockInterface)(nil).Context))
}

// GetAPIKey mocks base method.
func (m *MockInterface) GetAPIKey() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockInterfaceMockRecorder) GetAPIKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockInterface)(nil).GetAPIKey))
}

// GetClaim mocks base method.
func (m *MockInterface) GetClaim(arg0 string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaim", arg0)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetClaim indicates an expected call of GetClaim.
func (mr *MockInterfaceMockRecorder) GetClaim(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaim", reflect.TypeOf((*MockInterface)(nil).GetClaim), arg0)
}

// GetStringClaim mocks base method.
func (m *MockInterface) GetStringClaim(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringClaim", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetStringClaim indicates an expected call of GetStringClaim.
func (mr *MockInterfaceMockRecorder) GetStringClaim(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringClaim", reflect.TypeOf((*MockInterface)(nil).GetStringClaim), arg0)
}

// GetUUIDClaim mocks base method.
func (m *MockInterface) GetUUIDClaim(arg0 string) (uuid.UUID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUIDClaim", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUUIDClaim indicates an expected call of GetUUIDClaim.
func (mr *MockInterfaceMockRecorder) GetUUIDClaim(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUIDClaim", reflect.TypeOf((*MockInterface)(nil).GetUUIDClaim), arg0)
}

// SetClaim mocks base method.
func (m *MockInterface) SetClaim(arg0 string, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClaim", arg0, arg1)
}

// SetClaim indicates an expected call of SetClaim.
func (mr *MockInterfaceMockRecorder) SetClaim(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClaim", reflect.TypeOf((*MockInterface)(nil).SetClaim), arg0, arg1)
}
